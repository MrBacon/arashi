<?xml version="1.0" encoding="utf-8" ?>
<configuration>
   <components>
      <!-- Logging -->
      <component
			id="logging"
			service="Common.Logging.ILog, Common.Logging"
			type="Common.Logging.Simple.NoOpLogger, Common.Logging">
      </component>

      <!-- Repository -->
      <component
			id="asynccallcontext"
			service="Arashi.Core.CallContext.IAsyncCallContext, Arashi.Core"
			type="Arashi.Core.CallContext.AsyncCallContext, Arashi.Core"
         lifestyle="singleton" >
      </component>
      <component
			id="webcallcontext"
			service="Arashi.Core.CallContext.IWebCallContext, Arashi.Core"
			type="Arashi.Core.CallContext.WebCallContext, Arashi.Core"
         lifestyle="singleton" >
      </component>
      <component
			id="callcontextfactory"
			service="Arashi.Core.CallContext.ICallContextFactory, Arashi.Core"
			type="Arashi.Core.CallContext.ArashiCallContextFactory, Arashi.Core"
         lifestyle="singleton" >
      </component>
      <component
			id="nhibernatehelper"
			service="Arashi.Core.NHibernate.INHibernateHelper, Arashi.Core"
			type="Arashi.Core.NHibernate.NHibernateHelper, Arashi.Core">
      </component>
      <component
			id="repository"
			service="Arashi.Core.Repositories.IRepository`1, Arashi.Core"
			type="Arashi.Core.Repositories.NHRepository`1, Arashi.Core">
      </component>

      <!-- SessionFactory -->
      <component
         id="repository"
			service="Arashi.Core.NHibernate.ISessionFactory, Arashi.Core"
			type="Arashi.UnitTests.NHibernate.SessionFactory, Arashi.UnitTests"
         lifestyle="singleton" >
      </component>

      <!-- Core services -->
      <component
        id="core.versionservice"
        service="Arashi.Services.SiteStructure.IVersionService, Arashi.Services"
        type="Arashi.Services.SiteStructure.VersionService, Arashi.Services">
      </component>
      <component
			id="core.systemconfigurationservice"
			service="Arashi.Services.SystemService.ISystemConfigurationService, Arashi.Services"
			type="Arashi.Services.SystemService.SystemConfigurationService, Arashi.Services">
      </component>
      <component
			id="core.siteservice"
			service="Arashi.Services.SiteStructure.ISiteService, Arashi.Services"
			type="Arashi.Services.SiteStructure.SiteService, Arashi.Services">
      </component>
      <component
			id="core.themeservice"
			service="Arashi.Services.Themes.IThemeService, Arashi.Services"
			type="Arashi.Services.Themes.ThemeService, Arashi.Services">
      </component>
      <component
			id="core.controlpanelservice"
			service="Arashi.Services.ControlPanel.IControlPanelService, Arashi.Services"
			type="Arashi.Services.ControlPanel.ControlPanelService, Arashi.Services">
      </component>
      <component
			id="core.widgetservice"
			service="Arashi.Services.Widget.IWidgetService, Arashi.Services"
			type="Arashi.Services.Widget.WidgetService, Arashi.Services">
      </component>
      
      <!-- Membership -->
      <component
			id="core.userservice"
			service="Arashi.Services.Membership.IUserService, Arashi.Services"
			type="Arashi.Services.Membership.DefaultUserService, Arashi.Services">
      </component>
      <component
			id="core.authenticationservice"
			service="Arashi.Services.Membership.IAuthenticationService, Arashi.Services"
			type="Arashi.Services.Membership.FormsAuthenticationService, Arashi.Services">
      </component>

      <!-- Localization -->
      <component
			id="core.localizationservice"
			service="Arashi.Services.Localization.ILocalizationService, Arashi.Services"
			type="Arashi.Services.Localization.XmlResourceLocalizationService, Arashi.Services">
      </component>

      <!-- Localization -->
      <component
			id="core.fileservice"
			service="Arashi.Services.File.IFileService, Arashi.Services"
			type="Arashi.Services.File.FileService, Arashi.Services">
      </component>

      <!-- Content related services with decorators -->
      <component
			id="core.auditdecorator"
			service="Arashi.Services.Content.IContentItemService`1, Arashi.Services"
			type="Arashi.Services.Content.AuditContentDecorator`1, Arashi.Services">
         <parameters>
            <contentItemDao>${core.searchdecorator}</contentItemDao>
         </parameters>
      </component>
      <component
			id="core.searchdecorator"
			service="Arashi.Services.Content.IContentItemService`1, Arashi.Services"
			type="Arashi.Services.Search.SearchDecorator`1, Arashi.Services">
         <parameters>
            <contentItemService>${core.versioningdecorator}</contentItemService>
         </parameters>
      </component>
      <component
			id="core.versioningdecorator"
			service="Arashi.Services.Content.IContentItemService`1, Arashi.Services"
			type="Arashi.Services.Versioning.VersioningDecorator`1, Arashi.Services">
         <parameters>
            <contentItemService>${core.contentitemservice}</contentItemService>
         </parameters>
      </component>
      <component
			id="core.contentitemservice"
			service="Arashi.Services.Content.IContentItemService`1, Arashi.Services"
			type="Arashi.Services.Content.ContentItemService`1, Arashi.Services">
      </component>

      <component
			id="core.versioningservice"
			service="Arashi.Services.Versioning.IVersioningService`1, Arashi.Services"
			type="Arashi.Services.Versioning.VersioningService`1, Arashi.Services">
      </component>
      <component
			id="core.categoryservice"
			service="Arashi.Services.Content.ICategoryService, Arashi.Services"
			type="Arashi.Services.Content.CategoryService, Arashi.Services">
      </component>
      <component
			id="core.tagservice"
			service="Arashi.Services.Content.ITagService, Arashi.Services"
			type="Arashi.Services.Content.TagService, Arashi.Services">
      </component>
      <component
			id="core.commentservice"
			service="Arashi.Services.Content.ICommentService, Arashi.Services"
			type="Arashi.Services.Content.CommentService, Arashi.Services">
      </component>
      <component
			id="core.pageservice"
			service="Arashi.Services.Content.IPageService, Arashi.Services"
			type="Arashi.Services.Content.PageService, Arashi.Services">
      </component>
      <component
			id="core.searchservice"
			service="Arashi.Services.Search.ISearchService, Arashi.Services"
			type="Arashi.Services.Search.SearchService, Arashi.Services">
      </component>
      <component
			id="core.contentitemdao"
			service="Arashi.Services.Content.IContentItemDao`1, Arashi.Services"
			type="Arashi.Services.Content.ContentItemDao`1, Arashi.Services">
      </component>
      <component
			id="core.textextractor"
			service="Arashi.Core.Domain.Search.ITextExtractor, Arashi.Core.Domain"
			type="Arashi.Services.Search.IFilterTextExtractor, Arashi.Services">
         <parameters>
            <AllowedExtensions>.pdf,.doc,.docx,.pptx,.xls,.xlsx</AllowedExtensions>
         </parameters>
         <!-- use type="Arashi.Services.Search.NativeTextExtractor, Arashi.Services" in environments that don't support IFilter -->
      </component>

      <component
			id="core.dtoservice"
			service="Arashi.Services.Content.IDtoService, Arashi.Services"
			type="Arashi.Services.Content.DtoService, Arashi.Services">
      </component>

      <component
			id="core.messageservice"
			service="Arashi.Services.Notification.IMessageService, Arashi.Services"
			type="Arashi.Services.Notification.MessageService, Arashi.Services">
      </component>

      
      <!-- Scheduler 
      <component  id="Scheduling.Scheduler"
					  service="Castle.Components.Scheduler.IScheduler, Castle.Components.Scheduler"
					  type="Castle.Components.Scheduler.DefaultScheduler, Castle.Components.Scheduler" />

      <component  id="Scheduling.JobStore"
					  service="Castle.Components.Scheduler.JobStores.IJobStore, Castle.Components.Scheduler"
					  type="Castle.Components.Scheduler.JobStores.MemoryJobStore, Castle.Components.Scheduler"/>

      <component  id="Scheduling.JobRunner"
					  service="Castle.Components.Scheduler.IJobRunner, Castle.Components.Scheduler"
					  type="Castle.Components.Scheduler.DefaultJobRunner, Castle.Components.Scheduler" />

      <component  id="Scheduling.JobFactory"
					  service="Castle.Components.Scheduler.IJobFactory, Castle.Components.Scheduler"
					  type="Castle.Components.Scheduler.WindsorExtension.WindsorJobFactory, Castle.Components.Scheduler.WindsorExtension" />
-->
      <!-- Jobs 
      <component  id="Jobs.EmailScheduler"
							lifestyle="transient"
							service="Castle.Components.Scheduler.IJob, Castle.Components.Scheduler"
							type="Arashi.Services.Notification.EmailSenderJob, Arashi.Services" >
      </component>
-->
   </components>
</configuration>